import { NextResponse } from "next/server";
import nodemailer from "nodemailer";
import { readData, writeData } from "@/app/lib/fileStorage";
import { v4 as uuidv4 } from "uuid";

// ðŸ”µ GET
export async function GET(req: Request) {
Â  const { searchParams } = new URL(req.url);
Â  const page = parseInt(searchParams.get("page") || "1", 10);
Â  const perPage = parseInt(searchParams.get("perPage") || "10", 10);
Â  const nom = searchParams.get("nom")?.toLowerCase();
Â  const prenom = searchParams.get("prenom")?.toLowerCase();
Â  const matricule = searchParams.get("matricule");
Â  const dateFrom = searchParams.get("dateFrom");
Â  const dateTo = searchParams.get("dateTo");

Â  let { DemandeChangementParada } = readData();

Â  if (nom) DemandeChangementParada = DemandeChangementParada.filter(item => item.nom?.toLowerCase().includes(nom));
Â  if (prenom) DemandeChangementParada = DemandeChangementParada.filter(item => item.prenom?.toLowerCase().includes(prenom));
Â  if (matricule) DemandeChangementParada = DemandeChangementParada.filter(item => item.matricule?.includes(matricule));
Â  if (dateFrom && dateTo) {
Â  Â  const from = new Date(dateFrom);
Â  Â  const to = new Date(dateTo);
Â  Â  DemandeChangementParada = DemandeChangementParada.filter(item => {
Â  Â  Â  const createdAt = new Date(item.createdAt);
Â  Â  Â  return createdAt >= from && createdAt <= to;
Â  Â  });
Â  }

Â  const total = DemandeChangementParada.length;

    const paginated = DemandeChangementParada
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
      .slice((page - 1) * perPage, page * perPage);
Â  const enCours = DemandeChangementParada.filter(item => item.status === "en cours").length;
Â  const traite = DemandeChangementParada.filter(item => item.status === "traitÃ©").length;
Â  const demandes = DemandeChangementParada.slice((page - 1) * perPage, page * perPage);

Â  return NextResponse.json({ total, demandes, enCours, traite, paginated });
}

// ðŸ”µ POST
export async function POST(req: Request) {
Â  const body = await req.json();
Â  const db = readData();

Â  const newDemande = {
Â  Â  id: uuidv4(),
Â  Â  ...body,
Â  Â  status: body.status || "en cours",
Â  Â  createdAt: new Date().toISOString(),
Â  Â  updatedAt: new Date().toISOString(),
Â  };

Â  db.DemandeChangementParada.push(newDemande);
Â  writeData(db);

Â  return NextResponse.json(newDemande);
}

// ðŸ”µ PATCH
export async function PATCH(req: Request) {
Â  const { id, status, nouvelleParada } = await req.json();

Â  if (!id || !status) {
Â  Â  return NextResponse.json({ error: "ID et statut requis." }, { status: 400 });
Â  }

Â  const db = readData();
Â  const index = db.DemandeChangementParada.findIndex(item => item.id === id);

Â  if (index === -1) {
Â  Â  return NextResponse.json({ error: "Demande introuvable." }, { status: 404 });
Â  }

Â  const updatedDemande = {
Â  Â  ...db.DemandeChangementParada[index],
Â  Â  status,
Â  Â  nouvelleParada: nouvelleParada || db.DemandeChangementParada[index].nouvelleParada,
Â  Â  updatedAt: new Date().toISOString(),
Â  };

Â  db.DemandeChangementParada[index] = updatedDemande;
Â  writeData(db);

Â  let emailMessage = "Aucun email envoyÃ©.";
Â  if (status === "traitÃ©" && updatedDemande.email) {
Â  Â  const transporter = nodemailer.createTransport({
Â  Â  Â  service: "gmail",
Â  Â  Â  auth: {
Â  Â  Â  Â  user: process.env.SMTP_USER!,
Â  Â  Â  Â  pass: process.env.SMTP_PASS!,
Â  Â  Â  },
Â  Â  });

Â  Â  try {
Â  Â  Â  await transporter.sendMail({
Â  Â  Â  Â  from: `"Service RH" <${process.env.SMTP_USER}>`,
Â  Â  Â  Â  to: updatedDemande.email,
Â  Â  Â  Â  subject: "Mise Ã  jour de votre demande",
Â  Â  Â  Â  text: `Bonjour ${updatedDemande.prenom} ${updatedDemande.nom},\n\nVotre ancienne parada est : ${updatedDemande.ancienneParada}.\n\nVotre nouvelle parada est : ${updatedDemande.nouvelleParada}.\n\ncoordialement \ncoficab.`,
Â  Â  Â  });
Â  Â  Â  emailMessage = "Email envoyÃ© avec succÃ¨s !";
Â  Â  } catch (error) {
Â  Â  Â  console.error("Erreur email:", error);
Â  Â  Â  emailMessage = "Erreur lors de l'envoi de l'email.";
Â  Â  }
Â  }

Â  return NextResponse.json({
Â  Â  message: "Mise Ã  jour rÃ©ussie.",
Â  Â  emailStatus: emailMessage,
Â  Â  updated: updatedDemande,
Â  });
}

// ðŸ”µ DELETE
export async function DELETE(req: Request) {
Â  const { id } = await req.json();

Â  if (!id) {
Â  Â  return NextResponse.json({ error: "ID requis." }, { status: 400 });
Â  }

Â  const db = readData();
Â  const originalLength = db.DemandeChangementParada.length;
Â  db.DemandeChangementParada = db.DemandeChangementParada.filter(item => item.id !== id);

Â  if (db.DemandeChangementParada.length === originalLength) {
Â  Â  return NextResponse.json({ error: "Demande non trouvÃ©e." }, { status: 404 });
Â  }

Â  writeData(db);
Â  return NextResponse.json({ message: "Demande supprimÃ©e avec succÃ¨s." });
}
